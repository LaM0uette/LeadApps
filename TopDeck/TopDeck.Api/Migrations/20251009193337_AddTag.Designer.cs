// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TopDeck.Api.Data;

#nullable disable

namespace TopDeck.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251009193337_AddTag")]
    partial class AddTag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("data")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TopDeck.Api.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("EnergyIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.ToTable("Decks", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CollectionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CollectionNumber")
                        .HasColumnType("integer");

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DeckId", "CollectionCode", "CollectionNumber")
                        .IsUnique();

                    b.ToTable("DeckCards", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckDislike", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("DeckId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeckDislikes", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckLike", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("DeckId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeckLikes", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<int[]>("AddedEnergyIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("RemovedEnergyIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("SuggestorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("SuggestorId");

                    b.ToTable("DeckSuggestions", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionAddedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CollectionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CollectionNumber")
                        .HasColumnType("integer");

                    b.Property<int>("DeckSuggestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeckSuggestionId", "CollectionCode", "CollectionNumber")
                        .IsUnique();

                    b.ToTable("DeckSuggestionAddedCards", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionDislike", b =>
                {
                    b.Property<int>("DeckSuggestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("DeckSuggestionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeckSuggestionDislikes", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionLike", b =>
                {
                    b.Property<int>("DeckSuggestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("DeckSuggestionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeckSuggestionLikes", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionRemovedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CollectionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CollectionNumber")
                        .HasColumnType("integer");

                    b.Property<int>("DeckSuggestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeckSuggestionId", "CollectionCode", "CollectionNumber")
                        .IsUnique();

                    b.ToTable("DeckSuggestionRemovedCards", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckTag", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("DeckId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DeckTags", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("OAuthId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OAuthProvider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OAuthProvider", "OAuthId")
                        .IsUnique();

                    b.ToTable("Users", "data");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.Deck", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckCard", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckDislike", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.Deck", "Deck")
                        .WithMany("Dislikes")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopDeck.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckLike", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.Deck", "Deck")
                        .WithMany("Likes")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopDeck.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestion", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.Deck", "Deck")
                        .WithMany("Suggestions")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopDeck.Api.Entities.User", "Suggestor")
                        .WithMany()
                        .HasForeignKey("SuggestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Suggestor");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionAddedCard", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.DeckSuggestion", "Suggestion")
                        .WithMany("AddedCards")
                        .HasForeignKey("DeckSuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionDislike", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.DeckSuggestion", "Suggestion")
                        .WithMany("Dislikes")
                        .HasForeignKey("DeckSuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopDeck.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionLike", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.DeckSuggestion", "Suggestion")
                        .WithMany("Likes")
                        .HasForeignKey("DeckSuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopDeck.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestionRemovedCard", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.DeckSuggestion", "Suggestion")
                        .WithMany("RemovedCards")
                        .HasForeignKey("DeckSuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckTag", b =>
                {
                    b.HasOne("TopDeck.Api.Entities.Deck", "Deck")
                        .WithMany("DeckTags")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopDeck.Api.Entities.Tag", "Tag")
                        .WithMany("DeckTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.Deck", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("DeckTags");

                    b.Navigation("Dislikes");

                    b.Navigation("Likes");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.DeckSuggestion", b =>
                {
                    b.Navigation("AddedCards");

                    b.Navigation("Dislikes");

                    b.Navigation("Likes");

                    b.Navigation("RemovedCards");
                });

            modelBuilder.Entity("TopDeck.Api.Entities.Tag", b =>
                {
                    b.Navigation("DeckTags");
                });
#pragma warning restore 612, 618
        }
    }
}
