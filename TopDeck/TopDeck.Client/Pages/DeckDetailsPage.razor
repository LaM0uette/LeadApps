@page "/decks/{DeckCode}"
@inherits DeckDetailsPagePresenter
@attribute [AllowAnonymous]

<PageTitle>@(DeckDetails?.Name ?? "Deck")</PageTitle>


@if (DeckDetails is null)
{
    <VerticalSpacer Value="40"/>
    <LoadingWheel/>
}
else
{
    <div class="deck-details-page-container">
        <div class="deck-details-left-side"></div>
    
        <div class="deck-details-page @GetEnergyClass(DeckDetails.EnergyIds)">
            <div class="deck-details-header">
                <div class="deck-details-header-top">
                    <div class="deck-details-title-panel-container">
                        <TitlePanel Name="@DeckDetails.Name" Width="200px" Height="35px" FontSize="1.1em"/>
                        @if (!IsMobile && AuthenticatedUserUuid == DeckDetails.CreatorUui)
                        {
                            <button class="deck-details-title-panel-edit-deck-button-desktop" @onclick="EditDeck">
                                <img class="deck-details-title-panel-edit-deck-button-desktop__icon" src="img/edit-icon.svg" alt="edit deck"/>
                            </button>
                        }
                    </div>

                    <div class="deck-details-vote-panel-container">
                        <VotePanel Width="130px" Height="35px" FontSize="1.1em"
                                   DeckId="DeckDetails.Id"
                                   LikeUserUuids="DeckDetails.LikeUserUuids.ToList()"
                                   DislikeUserUuids="DeckDetails.DislikeUserUuids.ToList()"/>
                    </div>
                </div>

                @if (IsMobile) { <VerticalSpacer Value="10"/> }
                else { <VerticalSpacer Value="25"/> }
                
                <span class="deck-details-header__code" @onclick="CopyCode">@DeckCode</span>

                <div class="deck-details-highlight">
                    <div class="deck-details-highlighted-cards">
                        @if (TCGPHighlightedCards.Count >= 1)
                        {
                            <img class="deck-details-highlighted-cards__card" src="@TCGPHighlightedCards[0].ImageUrl" alt="img deck 1" loading="lazy" decoding="async" fetchpriority="low"/>
                        }
                        
                        @if (TCGPHighlightedCards.Count >= 2)
                        {
                            <img class="deck-details-highlighted-cards__card" src="@TCGPHighlightedCards[1].ImageUrl" alt="img deck 2" loading="lazy" decoding="async" fetchpriority="low"/>
                        }
                        
                        @if (TCGPHighlightedCards.Count >= 3)
                        {
                            <img class="deck-details-highlighted-cards__card" src="@TCGPHighlightedCards[2].ImageUrl" alt="img deck 3" loading="lazy" decoding="async" fetchpriority="low"/>
                        }
                    </div>

                    <div class="deck-details-energies">
                        @foreach (int energyId in DeckDetails.EnergyIds)
                        {
                            <img class="deck-details-energies__energy" src="https://tcgp-dex.com/energyTypes/@(EnergyTypes[energyId].ToLower()).webp" alt="energy " loading="lazy" decoding="async" fetchpriority="low"/>
                        }
                    </div>
                    
                    @if (!IsMobile)
                    {
                        <div class="deck-details-pc-overview">
                            <button class="deck-details-pc-overview-button @(CurrentTab is Tab.Overview ? "active" : "")" @onclick="SwitchTab">
                                <p class="deck-details-pc-overview-button__text">@Localizer.Localize("page.deckDetail.showAll.text", "View All")</p>
                                <img class="deck-details-pc-overview-button__icon" src="img/overview-tab-icon@(CurrentTab is Tab.Overview ? "-active" : "").svg" alt="overview button"/>
                            </button>
                        </div>
                    }
                </div>
                
                <VerticalSpacer Value="8"/>
                <hr class="deck-details-header__separator">
                
                <div class="deck-item-tags">
                    @foreach(int tag in DeckDetails.TagIds)
                    {
                        string? tagName = TagNames.GetValueOrDefault(tag);
                        if (tagName is null)
                            continue;
                
                        <Tag Name="@tagName"/>
                    }
                </div>
            </div>
            
            @if (CurrentTab is Tab.Cards)
            {
                <div class="deck-details-cards">
                    @if (TCGPCards.Count <= 0)
                    {
                        <LoadingWheel/>
                    }
                    else
                    {
                        foreach (TCGPCard card in TCGPCards)
                        {
                            <img class="deck-details-cards__card" src="@card.ImageUrl" alt="@card.Name" loading="lazy" decoding="async" fetchpriority="low"/>
                        }
                    }
                </div>
            }
            else if (CurrentTab is Tab.Overview)
            {
                <div class="deck-details-overview">
                    @if (TCGPCards.Count <= 0)
                    {
                        <LoadingWheel/>
                    }
                    else
                    {
                        foreach (TCGPCard card in TCGPCards)
                        {
                            <img class="deck-details-overview__card" src="@card.ImageUrl" alt="@card.Name" loading="lazy" decoding="async" fetchpriority="low"/>
                        }
                    }
                </div>
            }
            else if (CurrentTab is Tab.Suggestions && IsMobile)
            {
                <div class="deck-details-suggestions">
                    @if (DeckDetails.Suggestions.Count <= 0)
                    {
                        <p class="deck-details-suggestions__no-suggestions-text">@Localizer.Localize("page.deckDetail.noSuggestions.text", "No suggestions available for this deck.")</p>
                        
                        <VerticalSpacer Value="10"/>
                        
                        <AuthorizeView>
                            <Authorized>   
                                <div class="deck-details-suggestions-add-container">
                                    <PlusButton Width="100%" Height="28px" Clicked="AddSuggestion"/>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                    }
                    else
                    {
                        foreach (DeckDetailsSuggestion suggestion in DeckDetails.Suggestions)
                        {
                            if (suggestion.AddedCards.Count == 0 && suggestion.RemovedCards.Count == 0)
                                continue;
                            
                            <SuggestionAccordion Suggestion="suggestion"/>
                        }
                        
                        <AuthorizeView>
                            <Authorized>   
                                <div class="deck-details-suggestions-add-container">
                                    <PlusButton Width="100%" Height="28px" Clicked="AddSuggestion"/>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                        
                        <VerticalSpacer Value="80"/>
                    }
                </div>
            }
            
            @if (IsMobile)
            {
                <button class="deck-details-back-button" @onclick="GoBackAsync">
                    <img class="deck-details-back-button__icon" src="img/arrow-back-icon.svg" alt="back button"/>
                </button>
                
                if (AuthenticatedUserUuid == DeckDetails.CreatorUui)
                {
                    <button class="deck-details-title-panel-edit-deck-button" @onclick="EditDeck">
                        <img class="deck-details-title-panel-edit-deck-button__icon" src="img/edit-icon.svg" alt="edit deck"/>
                    </button>
                }
            
                <div class="deck-details-tabs">
                    <button class="deck-details-tab-button @(CurrentTab is Tab.Cards ? "active" : "")" @onclick="() => SelectTab(Tab.Cards)">
                        <img class="deck-details-tab-button__icon" src="img/card-tab-icon@(CurrentTab is Tab.Cards ? "-active" : "").svg" alt="card tab button"/>
                    </button>

                    <button class="deck-details-tab-button @(CurrentTab is Tab.Overview ? "active" : "")" @onclick="() => SelectTab(Tab.Overview)">
                        <img class="deck-details-tab-button__icon" src="img/overview-tab-icon@(CurrentTab is Tab.Overview ? "-active" : "").svg" alt="overview tab button"/>
                    </button>

                    <button class="deck-details-tab-button @(CurrentTab is Tab.Suggestions ? "active" : "")" @onclick="() => SelectTab(Tab.Suggestions)">
                        <img class="deck-details-tab-button__icon" src="img/suggestions-tab-icon@(CurrentTab is Tab.Suggestions ? "-active" : "").svg" alt="suggestion tab button"/>
                    </button>
                </div>
            }
        </div>
        
        <div class="deck-details-right-side">
            @if (!IsMobile)
            {
                <h3 class="deck-details-right-side__title">@Localizer.Localize("page.deckDetail.suggestion.title", "Suggestions")</h3>
                <VerticalSpacer Value="25"/>
                
                <div class="deck-details-suggestions">
                    @if (DeckDetails.Suggestions.Count <= 0)
                    {
                        <p class="deck-details-suggestions__no-suggestions-text">@Localizer.Localize("page.deckDetail.noSuggestions.text", "No suggestions available for this deck.")</p>

                        <VerticalSpacer Value="10"/>
                        
                        <AuthorizeView>
                            <Authorized>   
                                <div class="deck-details-suggestions-add-container">
                                    <PlusButton Width="100%" Height="28px" Clicked="AddSuggestion"/>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                    }
                    else
                    {
                        foreach (DeckDetailsSuggestion suggestion in DeckDetails.Suggestions)
                        {
                            if (suggestion.AddedCards.Count == 0 && suggestion.RemovedCards.Count == 0)
                                continue;
                            
                            <SuggestionAccordion Suggestion="suggestion"/>
                        }
                        
                        <AuthorizeView>
                            <Authorized>   
                                <div class="deck-details-suggestions-add-container">
                                    <PlusButton Width="100%" Height="28px" Clicked="AddSuggestion"/>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                        
                        <VerticalSpacer Value="80"/>
                    }
                </div>
            }
        </div>
        
        @if (CurrentMode == Mode.AddSuggestion)
        {
            <div class="deck-details-cards-edit">
                <div class="deck-details-cards-edit-header">
                    <div class="deck-details-cards-edit-cards-preview">
                        @for (int i = 0; i < TCGPSuggestionsCards.Count; i++)
                        {
                            int index = i; // capture stable copy to avoid modified-closure issues
                            TCGPCard card = TCGPSuggestionsCards[index];
                            string uniqueId = $"{card.Collection.Code}-{card.CollectionNumber}-{index}";
                            
                            <div class="deck-details-cards-edit-cards-preview__card-wrapper">
                                <img class="deck-details-cards-edit-cards-preview__card @(SelectedCardId == uniqueId ? "deck-details-cards-edit-cards-preview__card--selected" : null)"
                                     src="@card.ImageUrl" alt="@card.Name"
                                     @onclick="() => SelectCard(uniqueId, card)"/>
                                @if (SelectedCardId == uniqueId)
                                {
                                    <button class="deck-details-cards-edit-cards-preview__remove" @onclick="() => RemoveFromDeckAt(index)" @onclick:preventDefault="true" @onclick:stopPropagation="true">
                                        <img src="img/suggestion-minus-icon.svg" alt="minus"/> Remove
                                    </button>
                                }
                            </div>
                        }
                    </div>
                    <VerticalSpacer Value="8"/>
                    <hr class="deck-details-cards-edit-header__separator">
                    <div class="deck-details-cards-edit-header-deck-info">
                        <div class="deck-details-cards-edit-header-deck-info__card-count @(TotalCardsInSuggestion > 20 ? "deck-details-cards-edit-header-deck-info__card-count--over-limit" : null)">
                            @TotalCardsInSuggestion/20
                        </div>
                    </div>
                </div>
                
                <div class="deck-details-cards-edit-cards">
                    @if (TCGPAllCards.Count <= 0)
                    {
                        <LoadingWheel/>
                    }
                    else
                    {
                        foreach (TCGPCard card in FilteredTCGPAllCards)
                        {
                            int cardQuantityInDeck = GetCardQuantityInSuggestion(card);
                            
                            <button id="@GetCardElementId(card)"
                                    class="deck-details-cards-edit-card-button" 
                                    @onclick:preventDefault="true"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => AddToSuggestions(card)">
                                <img class="deck-details-cards-edit-card-button__img" src="@card.ImageUrl" alt="@card.Name" loading="lazy" decoding="async" fetchpriority="low"/>
                                @if (cardQuantityInDeck > 0)
                                {
                                    <div class="deck-details-cards-edit-card-button-overlay">
                                        <button class="deck-details-cards-edit-card-button-overlay-remove-button" 
                                                @onclick:preventDefault="true"
                                                @onclick:stopPropagation="true"
                                                @onclick="() => RemoveFromDeck(card)">
                                            <img class="deck-details-cards-edit-card-button-overlay-remove-button__icon" src="img/suggestion-minus-icon.svg" alt="minus icon"/>
                                        </button>
                                        
                                        <div class="deck-details-cards-edit-card-button-overlay-count">
                                            @(cardQuantityInDeck)/2
                                        </div>
                                        
                                        <div class="deck-details-cards-edit-card-button-overlay-controls">
                                            <button class="deck-details-cards-edit-card-button-overlay-controls-btn" 
                                                    @onclick:preventDefault="true"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => RemoveOneFromDeck(card)">
                                                <img src="img/suggestion-minus-icon.svg" alt="minus"/>
                                            </button>
                                            <button class="deck-details-cards-edit-card-button-overlay-controls-btn" 
                                                    @onclick:preventDefault="true"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => AddToSuggestions(card)" disabled="@(cardQuantityInDeck >= MAX_IDENTICAL_CARDS_IN_DECK)">
                                                <img src="img/suggestion-plus-icon.svg" alt="plus"/>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </button>
                        }
                    }
                </div>
                
                <button class="order-fab" @onclick="OpenOrder">
                    <img src="img/order-icon.svg" alt="order"/>
                </button>
                <button class="filter-fab" @onclick="OpenFilter">
                    <img src="img/filter-icon.svg" alt="filter"/>
                </button>
                
                <div class="deck-details-cards-edit-cards-buttons-container">
                    <button class="deck-details-cards-edit-cards-cancel-button" @onclick="Cancel">
                        @Localizer.Localize("page.deckDetailEdit.cancelButton.text", "Cancel")
                    </button>
            
                    <button class="deck-details-cards-edit-cards-save-button" @onclick="Save" disabled="@(NothingModified() || TotalCardsInSuggestion != MAX_CARDS_IN_DECK)">
                        @Localizer.Localize("page.deckDetailEdit.saveButton.text", "Save")
                    </button>
                </div>
                
                @if (IsOrderOpen)
                {
                    <div class="filter-modal__overlay" @onclick="CloseOrder">
                        <div class="filter-modal" @onclick:stopPropagation>
                            <div class="filter-modal__header">
                                <h3>@Localizer.Localize("component.deckOrder.header.title", "Order decks")</h3>
                                <button class="filter-modal__close" @onclick="CloseOrder">
                                    <img src="img/close-icon.svg" alt="close"/>
                                </button>
                            </div>
                            <div class="filter-modal__section">
                                <div class="filter-order-list">
                                    @foreach (OrderOption order in OrderOptions)
                                    {
                                        bool selected = IsOrderSelected(order.Key);
                                        <div class="filter-order-item @(selected ? "filter-order-item--toggled" : null)">
                                            <button class="filter-order-item__btn" @onclick="() => SelectOrder(order.Key)">
                                                <span class="filter-order-item__label">@order.Label</span>
                                            </button>
                                            <button class="filter-order-item__dir @(!selected ? "filter-order-item__dir--hideed" : null)" title="Asc/Desc" @onclick="() => ToggleOrderDirection(order.Key)" @onclick:stopPropagation="true">
                                                <img class="filter-order-item__dir-icon @(AscInput ? "filter-order-item__dir-icon--asc" : null)" src="img/order-downArrow-icon.svg" alt="asc/desc"/>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="filter-modal-footer">
                                <button class="filter-modal-footer__close" @onclick="ApplyOrder">
                                    <img src="img/close-icon.svg" alt="close"/>
                                </button>
                            </div>
                        </div>
                    </div>
                }

                @if (IsFilterOpen)
                {
                    <div class="filter-modal__overlay" @onclick="CloseFilter">
                        <div class="filter-modal" @onclick:stopPropagation>
                            <div class="filter-modal__header">
                                <h3>Filtrer les cartes</h3>
                                <button class="filter-modal__close" @onclick="CloseFilter">
                                    <img src="img/close-icon.svg" alt="close"/>
                                </button>
                            </div>

                            <div class="filter-modal__section">
                                <label>Recherche</label>
                                <input class="filter-input" placeholder="Nom de carte" @bind="SearchInput" />
                            </div>

                            <div class="filter-modal__section">
                                <label>Types (OR)</label>
                                <div class="filter-tags">
                                    @foreach (var name in AllTypeNames)
                                    {
                                        var checkedVal = SelectedTypeNames.Contains(name);
                                        <label class="filter-tag">
                                            <input type="checkbox" checked="@checkedVal" @onclick="@(() => ToggleTypeName(name))" />
                                            <span class="filter-tag__name">@name</span>
                                        </label>
                                    }
                                </div>
                            </div>

                            <div class="filter-modal__section">
                                <label>Types Pokémon (OR)</label>
                                <div class="filter-tags">
                                    @foreach (var name in AllPokemonTypeNames)
                                    {
                                        var checkedVal = SelectedPokemonTypeNames.Contains(name);
                                        <label class="filter-tag">
                                            <input type="checkbox" checked="@checkedVal" @onclick="@(() => TogglePokemonTypeName(name))" />
                                            <span class="filter-tag__name">@name</span>
                                        </label>
                                    }
                                </div>
                            </div>

                            <div class="filter-modal__section">
                                <label>Collections (OR)</label>
                                <div class="filter-tags">
                                    @foreach (var collectionCode in AllCollectionCodes)
                                    {
                                        var checkedVal = SelectedCollectionCodes.Contains(collectionCode);
                                        <label class="filter-tag">
                                            <input type="checkbox" checked="@checkedVal" @onclick="@(() => ToggleCollectionCode(collectionCode))" />
                                            <span class="filter-tag__name">@collectionCode</span>
                                        </label>
                                    }
                                </div>
                            </div>

                            <div class="filter-modal-footer">
                                <button class="filter-modal-footer__close" @onclick="ApplyFilter">
                                    <img src="img/close-icon.svg" alt="close"/>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}


