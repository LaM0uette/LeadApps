@page "/decks"
@using Tag = TopDeck.Domain.Models.Tag
@inherits DeckItemsPagePresenter
@attribute [AllowAnonymous]


<PageTitle>TOPDECK - Decks</PageTitle>


<div class="decks-page-page">
    <div id="deck-scroll" class="deck-items">
        @if (DeckItems.Count <= 0 && !IsLoading)
        {
            <p class="deck-items__no-cards-text">@Localizer.Localize("page.decksView.noCards.text", "No cards found.")</p>
        }
        else
        {
            <AuthorizeView>
                <Authorized>   
                    <DeckItemAddButton/>
                </Authorized>
                <NotAuthorized>
                </NotAuthorized>
            </AuthorizeView>
            
            foreach (DeckItem deckItem in DeckItems)
            {
                <DeckItemView DeckItem="@deckItem"/>
            }
        }
        
        @if (IsLoading)
        {
            <LoadingWheel/>
        }
        
        @if (DeckItems.Count > 0 && !IsLoading)
        {
            <div class="deck-items-pager">
                <button class="deck-items-pager__button" disabled="@(Page <= 1)" @onclick="PrevPage">@Localizer.Localize("component.pageButton.previous.text", "Previous")</button>
                <HorizontalSpacer Value="40"/>
                <div class="deck-items-page-buttons">
                    @foreach (PageButtonModel pageButtonModel in GetPageButtons())
                    {
                        <PageButton Page="@pageButtonModel.Page" IsCurrent="@pageButtonModel.IsCurrent" IsEllipsis="@pageButtonModel.IsEllipsis" Clicked="NavigateToPage" />
                    }
                </div>
                <HorizontalSpacer Value="40"/>
                <button class="deck-items-pager__button" disabled="@(!HasNextPage)" @onclick="NextPage">@Localizer.Localize("component.pageButton.next.text", "Next")</button>
            </div>
        }
    </div>
    
    <button class="order-fab" @onclick="OpenOrder">
        <img src="img/order-icon.svg" alt="order"/>
    </button>
    <button class="filter-fab" @onclick="OpenFilter">
        <img src="img/filter-icon.svg" alt="filter"/>
    </button>
    
    @if (IsOrderOpen)
    {
        <div class="filter-modal__overlay" @onclick="CloseOrder">
            <div class="filter-modal" @onclick:stopPropagation>
                <div class="filter-modal__header">
                    <h3>@Localizer.Localize("component.deckOrder.header.title", "Order decks")</h3>
                    <button class="filter-modal__close" @onclick="CloseOrder">
                        <img src="img/close-icon.svg" alt="close"/>
                    </button>
                </div>
                <div class="filter-modal__section">
                    <div class="filter-order-list">
                        @foreach (OrderOption order in OrderOptions)
                        {
                            bool selected = IsOrderSelected(order.Key);
                            <div class="filter-order-item @(selected ? "filter-order-item--toggled" : null)">
                                <button class="filter-order-item__btn" @onclick="() => SelectOrder(order.Key)">
                                    <span class="filter-order-item__label">@order.Label</span>
                                </button>
                                <button class="filter-order-item__dir @(!selected ? "filter-order-item__dir--hideed" : null)" title="Asc/Desc" @onclick="() => ToggleOrderDirection(order.Key)" @onclick:stopPropagation="true">
                                    <img class="filter-order-item__dir-icon @(AscInput ? "filter-order-item__dir-icon--asc" : null)" src="img/order-downArrow-icon.svg" alt="asc/desc"/>
                                </button>
                            </div>
                        }
                    </div>
                </div>
                <div class="filter-modal-footer">
                    <button class="filter-modal-footer__close" @onclick="ApplyOrder">
                        <img src="img/close-icon.svg" alt="close"/>
                    </button>
                </div>
            </div>
        </div>
    }

    @if (IsFilterOpen)
    {
        <div class="filter-modal__overlay" @onclick="CloseFilter">
            <div class="filter-modal" @onclick:stopPropagation>
                <div class="filter-modal__header">
                    <h3>@Localizer.Localize("component.deckFilter.header.title", "Filter decks")</h3>
                    <button class="filter-modal__close" @onclick="CloseFilter">
                        <img src="img/close-icon.svg" alt="close"/>
                    </button>
                </div>
                <div class="filter-modal__section">
                    <label>Recherche</label>
                    <input class="filter-input" placeholder="Nom, code ou créateur" @bind="SearchInput" />
                </div>

                <div class="filter-modal__section">
                    <label>Tags (OR)</label>
                    <div class="filter-tags">
                        @foreach (Tag tag in AllTags)
                        {
                            bool checkedVal = SelectedTagIds.Contains(tag.Id);
                            <label class="filter-tag">
                                <input type="checkbox" checked="@checkedVal" @onchange="(_)=>ToggleTag(tag.Id)" />
                                <span class="filter-tag__name" style="--tag-color:@tag.ColorHex">@tag.Name</span>
                            </label>
                        }
                    </div>
                </div>

                <div class="filter-modal__footer">
                    <button class="btn btn--ghost" @onclick="ResetFilter">Réinitialiser</button>
                    <span class="spacer"></span>
                    <button class="btn btn--primary" @onclick="ApplyFilter">Appliquer</button>
                </div>
            </div>
        </div>
    }
</div>